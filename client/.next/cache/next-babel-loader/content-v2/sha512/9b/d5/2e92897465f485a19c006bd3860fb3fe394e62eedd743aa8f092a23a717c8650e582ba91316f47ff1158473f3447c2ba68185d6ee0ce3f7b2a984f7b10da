{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/sahotag/Documents/Udemy/booking/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sahotag/Documents/Udemy/booking/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/** \n* create a component that will keep track of a users auth state\n* then wrap _app.js so that the entire app knows if the user is logged in or not \n**/\nimport React, { useEffect, useContext } from 'react';\nimport firebase from '../firebase';\nimport { Context } from '../context';\nimport { axiosAuth } from '../actions/axios';\nimport { setCookie, destroyCookie } from 'nookies';\n\nvar FirebaseAuthState = function FirebaseAuthState(_ref) {\n  var children = _ref.children;\n\n  var _useContext = useContext(Context),\n      dispatch = _useContext.dispatch;\n\n  useEffect(function () {\n    return firebase.auth().onIdTokenChanged( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n        var _yield$user$getIdToke, token;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (user) {\n                  _context.next = 6;\n                  break;\n                }\n\n                dispatch({\n                  type: \"LOGOUT\"\n                });\n                destroyCookie(null, 'token');\n                setCookie(null, 'token', '', {});\n                _context.next = 14;\n                break;\n\n              case 6:\n                _context.next = 8;\n                return user.getIdTokenResult();\n\n              case 8:\n                _yield$user$getIdToke = _context.sent;\n                token = _yield$user$getIdToke.token;\n                ///set token the cookie\n                destroyCookie(null, 'token');\n                setCookie(null, 'token', token, {});\n                console.log(\"TOKEN\", token);\n                /** \n                * send this token to the backend\n                **/\n\n                axiosAuth.post('/current-user', {}).then(function (res) {\n                  console.log('RES ====>', res);\n                  dispatch({\n                    type: 'LOGIN',\n                    payload: res.data\n                  });\n                });\n                /**    \n                * backend will check if the token is valid (using firebase admin tool)\n                * if it is verified you get the same user informatrion in the backend too\n                * then you can decide to either save this user in your database or update the existing user \n                * then send the user information back to the client\n                **/\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }, []);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: children\n  });\n};\n\nexport default FirebaseAuthState;","map":null,"metadata":{},"sourceType":"module"}