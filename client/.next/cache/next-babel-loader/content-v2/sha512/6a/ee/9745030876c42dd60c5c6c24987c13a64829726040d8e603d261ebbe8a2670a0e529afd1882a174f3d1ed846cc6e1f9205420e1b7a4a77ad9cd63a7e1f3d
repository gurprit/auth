{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/sahotag/Documents/Udemy/booking/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sahotag/Documents/Udemy/booking/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\n/** \n* create a component that will keep track of a users auth state\n* then wrap _app.js so that the entire app knows if the user is logged in or not \n**/\nimport React, { useEffect, useContext } from 'react';\nimport firebase from '../firebase';\nimport { Context } from '../context';\n\nvar FirebaseAuthState = function FirebaseAuthState(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(Context),\n      dispatch = _useContext.dispatch;\n\n  useEffect(function () {\n    return firebase.auth().onAuthStateChanged( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!user) {\n                  dispatch({\n                    type: \"LOGOUT\"\n                  });\n                } else {}\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n_s(FirebaseAuthState, \"o3sFqHzzIboOoOF6b2FSmERiAhY=\");\n\n_c = FirebaseAuthState;\nexport default FirebaseAuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseAuthState\");","map":{"version":3,"sources":["/Users/sahotag/Documents/Udemy/booking/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","FirebaseAuthState","children","dispatch","auth","onAuthStateChanged","user","type"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAAQC,OAAR,QAAsB,YAAtB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAgB;AAAA;;AAAA,MAAdC,QAAc,QAAdA,QAAc;;AAAA,oBACjBJ,UAAU,CAACE,OAAD,CADO;AAAA,MAC9BG,QAD8B,eAC9BA,QAD8B;;AAGtCN,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAOE,QAAQ,CAACK,IAAT,GAAgBC,kBAAhB;AAAA,2EAAmC,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AACtC,oBAAI,CAACA,IAAL,EAAW;AACPH,kBAAAA,QAAQ,CAAC;AACLI,oBAAAA,IAAI,EAAE;AADD,mBAAD,CAAR;AAGH,iBAJD,MAIO,CAEN;;AAPqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAnC;;AAAA;AAAA;AAAA;AAAA,QAAP;AASH,GAVQ,EAUN,EAVM,CAAT;AAYA,sBAAO;AAAA,cAAGL;AAAH,mBAAP;AACH,CAhBD;;GAAMD,iB;;KAAAA,iB;AAkBN,eAAeA,iBAAf","sourcesContent":["/** \n* create a component that will keep track of a users auth state\n* then wrap _app.js so that the entire app knows if the user is logged in or not \n**/\n\nimport React, {useEffect, useContext} from 'react';\nimport firebase from '../firebase';\nimport {Context} from '../context';\n\nconst FirebaseAuthState = ({children}) => {\n    const { dispatch } = useContext(Context);\n    \n    useEffect(() => {\n        return firebase.auth().onAuthStateChanged(async (user) => {\n            if (!user) {\n                dispatch({\n                    type: \"LOGOUT\",\n                });\n            } else {\n                                   \n            }\n        });\n    }, []);\n\n    return <>{children}</>\n};\n\nexport default FirebaseAuthState;"]},"metadata":{},"sourceType":"module"}