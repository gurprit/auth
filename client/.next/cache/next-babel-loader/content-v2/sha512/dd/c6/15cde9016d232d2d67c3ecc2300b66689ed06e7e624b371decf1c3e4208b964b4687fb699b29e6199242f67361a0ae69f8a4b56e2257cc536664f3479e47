{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/** \n* create a component that will keep track of a users auth state\n* then wrap _app.js so that the entire app knows if the user is logged in or not \n**/\nimport React, { useEffect, useContext } from 'react';\nimport firebase from '../firebase';\nimport { Context } from '../context';\n\nconst FirebaseAuthState = ({\n  children\n}) => {\n  const {\n    dispatch\n  } = useContext(Context);\n  useEffect(() => {\n    return firebase.auth().onIdTokenChanged(async user => {\n      if (!user) {\n        dispatch({\n          type: \"LOGOUT\"\n        });\n      } else {\n        const {\n          token\n        } = await user.getIdTokenResult();\n        console.log(\"TOKEN\", token);\n        /** \n        * send this token to the backend \n        * backend will check if the token is valid (using firebase admin tool)\n        * if it is verified you get the same user informatrion in the backend too\n        * then you can decide to either save this user in your database or update the existing user \n        * then send the user information back to the client\n        **/\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\nexport default FirebaseAuthState;","map":{"version":3,"sources":["/Users/sahotag/Documents/Udemy/booking/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","FirebaseAuthState","children","dispatch","auth","onIdTokenChanged","user","type","token","getIdTokenResult","console","log"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAAQC,OAAR,QAAsB,YAAtB;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAeL,UAAU,CAACE,OAAD,CAA/B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAOE,QAAQ,CAACK,IAAT,GAAgBC,gBAAhB,CAAiC,MAAOC,IAAP,IAAgB;AACpD,UAAI,CAACA,IAAL,EAAW;AACPH,QAAAA,QAAQ,CAAC;AACLI,UAAAA,IAAI,EAAE;AADD,SAAD,CAAR;AAGH,OAJD,MAIO;AACP,cAAM;AAACC,UAAAA;AAAD,YAAU,MAAMF,IAAI,CAACG,gBAAL,EAAtB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB;AAEA;AACZ;AACA;AACA;AACA;AACA;AACA;AAEa;AACJ,KAlBM,CAAP;AAmBH,GApBQ,EAoBN,EApBM,CAAT;AAsBA,sBAAO;AAAA,cAAGN;AAAH,mBAAP;AACH,CA1BD;;AA4BA,eAAeD,iBAAf","sourcesContent":["/** \n* create a component that will keep track of a users auth state\n* then wrap _app.js so that the entire app knows if the user is logged in or not \n**/\n\nimport React, {useEffect, useContext} from 'react';\nimport firebase from '../firebase';\nimport {Context} from '../context';\n\nconst FirebaseAuthState = ({children}) => {\n    const { dispatch } = useContext(Context);\n    \n    useEffect(() => {\n        return firebase.auth().onIdTokenChanged(async (user) => {\n            if (!user) {\n                dispatch({\n                    type: \"LOGOUT\",\n                });\n            } else {\n            const {token} = await user.getIdTokenResult();\n            console.log(\"TOKEN\", token);\n                \n            /** \n            * send this token to the backend \n            * backend will check if the token is valid (using firebase admin tool)\n            * if it is verified you get the same user informatrion in the backend too\n            * then you can decide to either save this user in your database or update the existing user \n            * then send the user information back to the client\n            **/\n         \n            }\n        });\n    }, []);\n\n    return <>{children}</>\n};\n\nexport default FirebaseAuthState;"]},"metadata":{},"sourceType":"module"}