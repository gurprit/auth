{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/** \n* create a component that will keep track of a users auth state\n* then wrap _app.js so that the entire app knows if the user is logged in or not \n**/\nimport React, { useEffect, useContext } from 'react';\nimport firebase from '../firebase';\nimport { Context } from '../context';\nimport { axiosAuth } from '../actions/axios';\nimport { setCookie, destroyCookie } from 'nookies';\n\nconst FirebaseAuthState = ({\n  children\n}) => {\n  const {\n    dispatch\n  } = useContext(Context);\n  useEffect(() => {\n    return firebase.auth().onIdTokenChanged(async user => {\n      if (!user) {\n        dispatch({\n          type: \"LOGOUT\"\n        });\n        destroyCookie(null, 'token');\n        setCookie(null, 'token', '', {});\n      } else {\n        const {\n          token\n        } = await user.getIdTokenResult(); ///set token the cookie\n\n        destroyCookie(null, 'token');\n        setCookie(null, 'token', token, {});\n        console.log(\"TOKEN\", token);\n        /** \n        * send this token to the backend\n        **/\n\n        axiosAuth.post('/current-user', {}).then(res => {\n          console.log('RES ====>', res);\n          dispatch({\n            type: 'LOGIN',\n            payload: res.data\n          });\n        });\n        /**    \n        * backend will check if the token is valid (using firebase admin tool)\n        * if it is verified you get the same user informatrion in the backend too\n        * then you can decide to either save this user in your database or update the existing user \n        * then send the user information back to the client\n        **/\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\nexport default FirebaseAuthState;","map":{"version":3,"sources":["/Users/sahotag/Documents/Udemy/booking/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","axiosAuth","setCookie","destroyCookie","FirebaseAuthState","children","dispatch","auth","onIdTokenChanged","user","type","token","getIdTokenResult","console","log","post","then","res","payload","data"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,SAAzC;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAeR,UAAU,CAACE,OAAD,CAA/B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAOE,QAAQ,CAACQ,IAAT,GAAgBC,gBAAhB,CAAiC,MAAOC,IAAP,IAAgB;AACpD,UAAI,CAACA,IAAL,EAAW;AACPH,QAAAA,QAAQ,CAAC;AACLI,UAAAA,IAAI,EAAE;AADD,SAAD,CAAR;AAGAP,QAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb;AACAD,QAAAA,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgB,EAAhB,EAAoB,EAApB,CAAT;AACH,OAND,MAMO;AACP,cAAM;AAACS,UAAAA;AAAD,YAAU,MAAMF,IAAI,CAACG,gBAAL,EAAtB,CADO,CAEP;;AACAT,QAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb;AACAD,QAAAA,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgBS,KAAhB,EAAuB,EAAvB,CAAT;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB;AAEA;AACZ;AACA;;AACYV,QAAAA,SAAS,CAACc,IAAV,CAAe,eAAf,EAAgC,EAAhC,EAAoCC,IAApC,CAA0CC,GAAD,IAAS;AAC9CJ,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,GAAzB;AACAX,UAAAA,QAAQ,CAAC;AACLI,YAAAA,IAAI,EAAE,OADD;AAELQ,YAAAA,OAAO,EAAED,GAAG,CAACE;AAFR,WAAD,CAAR;AAIH,SAND;AAQA;AACZ;AACA;AACA;AACA;AACA;AAES;AACA,KAjCM,CAAP;AAkCH,GAnCQ,EAmCN,EAnCM,CAAT;AAqCA,sBAAO;AAAA,cAAGd;AAAH,mBAAP;AACH,CAzCD;;AA2CA,eAAeD,iBAAf","sourcesContent":["/** \n* create a component that will keep track of a users auth state\n* then wrap _app.js so that the entire app knows if the user is logged in or not \n**/\n\nimport React, {useEffect, useContext} from 'react';\nimport firebase from '../firebase';\nimport {Context} from '../context';\nimport {axiosAuth} from '../actions/axios';\nimport { setCookie, destroyCookie } from 'nookies';\n\nconst FirebaseAuthState = ({children}) => {\n    const { dispatch } = useContext(Context);\n    \n    useEffect(() => {\n        return firebase.auth().onIdTokenChanged(async (user) => {\n            if (!user) {\n                dispatch({\n                    type: \"LOGOUT\",\n                });\n                destroyCookie(null, 'token');\n                setCookie(null, 'token', '', {});\n            } else {\n            const {token} = await user.getIdTokenResult();\n            ///set token the cookie\n            destroyCookie(null, 'token');\n            setCookie(null, 'token', token, {});\n            console.log(\"TOKEN\", token);\n   \n            /** \n            * send this token to the backend\n            **/ \n            axiosAuth.post('/current-user', {}).then((res) => {\n                console.log('RES ====>', res); \n                dispatch({\n                    type: 'LOGIN', \n                    payload: res.data,\n                });\n            });\n                \n            /**    \n            * backend will check if the token is valid (using firebase admin tool)\n            * if it is verified you get the same user informatrion in the backend too\n            * then you can decide to either save this user in your database or update the existing user \n            * then send the user information back to the client\n            **/\n         \n        }\n        });\n    }, []);\n\n    return <>{children}</>\n};\n\nexport default FirebaseAuthState;"]},"metadata":{},"sourceType":"module"}