{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\n/** \n* create a component that will keep track of a users auth state\n* then wrap _app.js so that the entire app knows if the user is logged in or not \n**/\nimport React, { useEffect, useContext } from 'react';\nimport firebase from '../firebase';\nimport { Context } from '../context';\nimport axios from 'axios';\n\nconst FirebaseAuthState = ({\n  children\n}) => {\n  const {\n    dispatch\n  } = useContext(Context);\n  useEffect(() => {\n    return firebase.auth().onIdTokenChanged(async user => {\n      if (!user) {\n        dispatch({\n          type: \"LOGOUT\"\n        });\n      } else {\n        const {\n          token\n        } = await user.getIdTokenResult();\n        console.log(\"TOKEN\", token);\n        /** \n        * send this token to the backend\n        **/\n\n        /**    \n        * backend will check if the token is valid (using firebase admin tool)\n        * if it is verified you get the same user informatrion in the backend too\n        * then you can decide to either save this user in your database or update the existing user \n        * then send the user information back to the client\n        **/\n\n        axios.post(\"http://localhost:8000/api/current-user\", {}, {\n          headers: {\n            token\n          }\n        }).then(res => {\n          console.log('RES ====>', res);\n          dispatch({\n            type: 'LOGIN'\n          });\n        });\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: children\n  });\n};\n\nexport default FirebaseAuthState;","map":null,"metadata":{},"sourceType":"module"}