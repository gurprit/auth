{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/sahotag/Documents/Udemy/booking/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sahotag/Documents/Udemy/booking/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\n/** \n* create a component that will keep track of a users auth state\n* then wrap _app.js so that the entire app knows if the user is logged in or not \n**/\nimport React, { useEffect, useContext } from 'react';\nimport firebase from '../firebase';\nimport { Context } from '../context';\nimport { axiosAuth } from '../actions/axios';\nimport { setCookie, destroyCookie } from 'nookies';\n\nvar FirebaseAuthState = function FirebaseAuthState(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(Context),\n      dispatch = _useContext.dispatch;\n\n  useEffect(function () {\n    return firebase.auth().onIdTokenChanged( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n        var _yield$user$getIdToke, token;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (user) {\n                  _context.next = 6;\n                  break;\n                }\n\n                dispatch({\n                  type: \"LOGOUT\"\n                });\n                destroyCookie(null, 'token');\n                setCookie(null, 'token', '', {});\n                _context.next = 14;\n                break;\n\n              case 6:\n                _context.next = 8;\n                return user.getIdTokenResult();\n\n              case 8:\n                _yield$user$getIdToke = _context.sent;\n                token = _yield$user$getIdToke.token;\n                ///set token the cookie\n                destroyCookie(null, 'token');\n                setCookie(null, 'token', token, {});\n                console.log(\"TOKEN\", token);\n                /** \n                * send this token to the backend\n                **/\n\n                axiosAuth.post('/current-user', {}).then(function (res) {\n                  console.log('RES ====>', res);\n                  dispatch({\n                    type: 'LOGIN',\n                    payload: res.data\n                  });\n                });\n                /**    \n                * backend will check if the token is valid (using firebase admin tool)\n                * if it is verified you get the same user informatrion in the backend too\n                * then you can decide to either save this user in your database or update the existing user \n                * then send the user information back to the client\n                **/\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n_s(FirebaseAuthState, \"o3sFqHzzIboOoOF6b2FSmERiAhY=\");\n\n_c = FirebaseAuthState;\nexport default FirebaseAuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseAuthState\");","map":{"version":3,"sources":["/Users/sahotag/Documents/Udemy/booking/client/components/FirebaseAuthState.js"],"names":["React","useEffect","useContext","firebase","Context","axiosAuth","setCookie","destroyCookie","FirebaseAuthState","children","dispatch","auth","onIdTokenChanged","user","type","getIdTokenResult","token","console","log","post","then","res","payload","data"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,SAAzC;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAgB;AAAA;;AAAA,MAAdC,QAAc,QAAdA,QAAc;;AAAA,oBACjBP,UAAU,CAACE,OAAD,CADO;AAAA,MAC9BM,QAD8B,eAC9BA,QAD8B;;AAGtCT,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAOE,QAAQ,CAACQ,IAAT,GAAgBC,gBAAhB;AAAA,2EAAiC,iBAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAC/BA,IAD+B;AAAA;AAAA;AAAA;;AAEhCH,gBAAAA,QAAQ,CAAC;AACLI,kBAAAA,IAAI,EAAE;AADD,iBAAD,CAAR;AAGAP,gBAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb;AACAD,gBAAAA,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgB,EAAhB,EAAoB,EAApB,CAAT;AANgC;AAAA;;AAAA;AAAA;AAAA,uBAQdO,IAAI,CAACE,gBAAL,EARc;;AAAA;AAAA;AAQ7BC,gBAAAA,KAR6B,yBAQ7BA,KAR6B;AASpC;AACAT,gBAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,CAAb;AACAD,gBAAAA,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgBU,KAAhB,EAAuB,EAAvB,CAAT;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AAEA;AACZ;AACA;;AACYX,gBAAAA,SAAS,CAACc,IAAV,CAAe,eAAf,EAAgC,EAAhC,EAAoCC,IAApC,CAAyC,UAACC,GAAD,EAAS;AAC9CJ,kBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,GAAzB;AACAX,kBAAAA,QAAQ,CAAC;AACLI,oBAAAA,IAAI,EAAE,OADD;AAELQ,oBAAAA,OAAO,EAAED,GAAG,CAACE;AAFR,mBAAD,CAAR;AAIH,iBAND;AAQA;AACZ;AACA;AACA;AACA;AACA;;AA9BgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjC;;AAAA;AAAA;AAAA;AAAA,QAAP;AAkCH,GAnCQ,EAmCN,EAnCM,CAAT;AAqCA,sBAAO;AAAA,cAAGd;AAAH,mBAAP;AACH,CAzCD;;GAAMD,iB;;KAAAA,iB;AA2CN,eAAeA,iBAAf","sourcesContent":["/** \n* create a component that will keep track of a users auth state\n* then wrap _app.js so that the entire app knows if the user is logged in or not \n**/\n\nimport React, {useEffect, useContext} from 'react';\nimport firebase from '../firebase';\nimport {Context} from '../context';\nimport {axiosAuth} from '../actions/axios';\nimport { setCookie, destroyCookie } from 'nookies';\n\nconst FirebaseAuthState = ({children}) => {\n    const { dispatch } = useContext(Context);\n    \n    useEffect(() => {\n        return firebase.auth().onIdTokenChanged(async (user) => {\n            if (!user) {\n                dispatch({\n                    type: \"LOGOUT\",\n                });\n                destroyCookie(null, 'token');\n                setCookie(null, 'token', '', {});\n            } else {\n            const {token} = await user.getIdTokenResult();\n            ///set token the cookie\n            destroyCookie(null, 'token');\n            setCookie(null, 'token', token, {});\n            console.log(\"TOKEN\", token);\n   \n            /** \n            * send this token to the backend\n            **/ \n            axiosAuth.post('/current-user', {}).then((res) => {\n                console.log('RES ====>', res); \n                dispatch({\n                    type: 'LOGIN', \n                    payload: res.data,\n                });\n            });\n                \n            /**    \n            * backend will check if the token is valid (using firebase admin tool)\n            * if it is verified you get the same user informatrion in the backend too\n            * then you can decide to either save this user in your database or update the existing user \n            * then send the user information back to the client\n            **/\n         \n        }\n        });\n    }, []);\n\n    return <>{children}</>\n};\n\nexport default FirebaseAuthState;"]},"metadata":{},"sourceType":"module"}